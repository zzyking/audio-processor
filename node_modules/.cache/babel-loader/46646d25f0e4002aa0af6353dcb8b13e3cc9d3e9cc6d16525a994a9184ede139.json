{"ast":null,"code":"var _jsxFileName = \"/Users/king/Documents/GitHub/fir-filter/src/AudioProcessor.js\",\n  _s = $RefreshSig$();\n// src/AudioProcessor.js\nimport React, { useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioProcessor = () => {\n  _s();\n  const [recording, setRecording] = useState(false);\n  const [audioURL, setAudioURL] = useState('');\n  const [noisyAudioURL, setNoisyAudioURL] = useState('');\n  const [filteredAudioURL, setFilteredAudioURL] = useState('');\n  const audioContextRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const startRecording = () => {\n    setRecording(true);\n    audioChunksRef.current = [];\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      mediaRecorderRef.current.ondataavailable = event => {\n        audioChunksRef.current.push(event.data);\n      };\n      mediaRecorderRef.current.onstop = processAudio;\n      mediaRecorderRef.current.start();\n    });\n  };\n  const stopRecording = () => {\n    setRecording(false);\n    mediaRecorderRef.current.stop();\n  };\n  const processAudio = () => {\n    const audioBlob = new Blob(audioChunksRef.current, {\n      type: 'audio/wav'\n    });\n    const audioUrl = URL.createObjectURL(audioBlob);\n    setAudioURL(audioUrl);\n    addNoiseAndFilter(audioBlob);\n  };\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      const audioUrl = URL.createObjectURL(file);\n      setAudioURL(audioUrl);\n      addNoiseAndFilter(file);\n    }\n  };\n  const addNoiseAndFilter = audioBlob => {\n    const reader = new FileReader();\n    reader.readAsArrayBuffer(audioBlob);\n    reader.onloadend = () => {\n      audioContextRef.current.decodeAudioData(reader.result, buffer => {\n        const noisyBuffer = addGaussianNoise(buffer, 20);\n        const noisyBlob = bufferToBlob(noisyBuffer);\n        const noisyUrl = URL.createObjectURL(noisyBlob);\n        setNoisyAudioURL(noisyUrl);\n        const filteredBuffer = applyFIRFilter(noisyBuffer);\n        const filteredBlob = bufferToBlob(filteredBuffer);\n        const filteredUrl = URL.createObjectURL(filteredBlob);\n        setFilteredAudioURL(filteredUrl);\n      });\n    };\n  };\n  const addGaussianNoise = (buffer, snr) => {\n    const noisyBuffer = audioContextRef.current.createBuffer(1, buffer.length, buffer.sampleRate);\n    const channelData = buffer.getChannelData(0);\n    const noisyData = noisyBuffer.getChannelData(0);\n    const signalPower = channelData.reduce((sum, val) => sum + val * val, 0) / channelData.length;\n    const noisePower = signalPower / 10 ** (snr / 10);\n    for (let i = 0; i < channelData.length; i++) {\n      noisyData[i] = channelData[i] + (Math.random() - 0.5) * Math.sqrt(noisePower);\n    }\n    return noisyBuffer;\n  };\n  const applyFIRFilter = buffer => {\n    const filterCoeffs = calculateFIRCoefficients();\n    const input = buffer.getChannelData(0);\n    const output = new Float32Array(input.length);\n    for (let i = 0; i < input.length; i++) {\n      output[i] = 0;\n      for (let j = 0; j < filterCoeffs.length; j++) {\n        if (i - j >= 0) {\n          output[i] += input[i - j] * filterCoeffs[j];\n        }\n      }\n    }\n    const filteredBuffer = audioContextRef.current.createBuffer(1, output.length, buffer.sampleRate);\n    filteredBuffer.copyToChannel(output, 0);\n    return filteredBuffer;\n  };\n  const calculateFIRCoefficients = () => {\n    const N = 101; // 滤波器长度\n    const fc1 = 4000 / 16000; // 归一化通带边缘频率\n    const fc2 = 4500 / 16000; // 归一化阻带边缘频率\n    const h = new Float32Array(N);\n    const M = N - 1;\n    for (let n = 0; n < N; n++) {\n      if (n === M / 2) {\n        h[n] = 2 * (fc2 - fc1);\n      } else {\n        h[n] = (Math.sin(2 * Math.PI * fc2 * (n - M / 2)) - Math.sin(2 * Math.PI * fc1 * (n - M / 2))) / (Math.PI * (n - M / 2));\n      }\n      h[n] *= 0.54 - 0.46 * Math.cos(2 * Math.PI * n / M); // 汉宁窗\n    }\n    return h;\n  };\n  const bufferToBlob = buffer => {\n    const wavBuffer = audioBufferToWav(buffer);\n    return new Blob([new DataView(wavBuffer)], {\n      type: 'audio/wav'\n    });\n  };\n  const audioBufferToWav = buffer => {\n    const numOfChannels = buffer.numberOfChannels;\n    const length = buffer.length * numOfChannels * 2 + 44;\n    const bufferResult = new ArrayBuffer(length);\n    const view = new DataView(bufferResult);\n    let offset = 0;\n    let pos = 0;\n    const writeString = str => {\n      for (let i = 0; i < str.length; i++) {\n        view.setUint8(pos + offset, str.charCodeAt(i));\n        offset++;\n      }\n    };\n    const write16Bit = data => {\n      view.setInt16(pos + offset, data, true);\n      offset += 2;\n    };\n    const write32Bit = data => {\n      view.setInt32(pos + offset, data, true);\n      offset += 4;\n    };\n    writeString('RIFF');\n    write32Bit(length - 8);\n    writeString('WAVE');\n    writeString('fmt ');\n    write32Bit(16);\n    write16Bit(1);\n    write16Bit(numOfChannels);\n    write32Bit(buffer.sampleRate);\n    write32Bit(buffer.sampleRate * numOfChannels * 2);\n    write16Bit(numOfChannels * 2);\n    write16Bit(16);\n    writeString('data');\n    write32Bit(length - pos - 4);\n    for (let i = 0; i < buffer.length; i++) {\n      for (let channel = 0; channel < numOfChannels; channel++) {\n        const sample = Math.max(-1, Math.min(1, buffer.getChannelData(channel)[i]));\n        write16Bit(sample < 0 ? sample * 32768 : sample * 32767);\n      }\n    }\n    return bufferResult;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: recording ? stopRecording : startRecording,\n      children: recording ? 'Stop Recording' : 'Start Recording'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"audio/*\",\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), audioURL && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Original Audio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        src: audioURL\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }, this), noisyAudioURL && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Noisy Audio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        src: noisyAudioURL\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }, this), filteredAudioURL && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Filtered Audio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        src: filteredAudioURL\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioProcessor, \"SyueZqtYwXIp2qxvFl1EejyJzTI=\");\n_c = AudioProcessor;\nexport default AudioProcessor;\nvar _c;\n$RefreshReg$(_c, \"AudioProcessor\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","AudioProcessor","_s","recording","setRecording","audioURL","setAudioURL","noisyAudioURL","setNoisyAudioURL","filteredAudioURL","setFilteredAudioURL","audioContextRef","mediaRecorderRef","audioChunksRef","startRecording","current","navigator","mediaDevices","getUserMedia","audio","then","stream","window","AudioContext","webkitAudioContext","MediaRecorder","ondataavailable","event","push","data","onstop","processAudio","start","stopRecording","stop","audioBlob","Blob","type","audioUrl","URL","createObjectURL","addNoiseAndFilter","handleFileUpload","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","decodeAudioData","result","buffer","noisyBuffer","addGaussianNoise","noisyBlob","bufferToBlob","noisyUrl","filteredBuffer","applyFIRFilter","filteredBlob","filteredUrl","snr","createBuffer","length","sampleRate","channelData","getChannelData","noisyData","signalPower","reduce","sum","val","noisePower","i","Math","random","sqrt","filterCoeffs","calculateFIRCoefficients","input","output","Float32Array","j","copyToChannel","N","fc1","fc2","h","M","n","sin","PI","cos","wavBuffer","audioBufferToWav","DataView","numOfChannels","numberOfChannels","bufferResult","ArrayBuffer","view","offset","pos","writeString","str","setUint8","charCodeAt","write16Bit","setInt16","write32Bit","setInt32","channel","sample","max","min","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","controls","src","_c","$RefreshReg$"],"sources":["/Users/king/Documents/GitHub/fir-filter/src/AudioProcessor.js"],"sourcesContent":["// src/AudioProcessor.js\nimport React, { useState, useRef } from 'react';\n\nconst AudioProcessor = () => {\n  const [recording, setRecording] = useState(false);\n  const [audioURL, setAudioURL] = useState('');\n  const [noisyAudioURL, setNoisyAudioURL] = useState('');\n  const [filteredAudioURL, setFilteredAudioURL] = useState('');\n  const audioContextRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n\n  const startRecording = () => {\n    setRecording(true);\n    audioChunksRef.current = [];\n    navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      mediaRecorderRef.current.ondataavailable = event => {\n        audioChunksRef.current.push(event.data);\n      };\n      mediaRecorderRef.current.onstop = processAudio;\n      mediaRecorderRef.current.start();\n    });\n  };\n\n  const stopRecording = () => {\n    setRecording(false);\n    mediaRecorderRef.current.stop();\n  };\n\n  const processAudio = () => {\n    const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });\n    const audioUrl = URL.createObjectURL(audioBlob);\n    setAudioURL(audioUrl);\n    addNoiseAndFilter(audioBlob);\n  };\n\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      const audioUrl = URL.createObjectURL(file);\n      setAudioURL(audioUrl);\n      addNoiseAndFilter(file);\n    }\n  };\n\n  const addNoiseAndFilter = (audioBlob) => {\n    const reader = new FileReader();\n    reader.readAsArrayBuffer(audioBlob);\n    reader.onloadend = () => {\n      audioContextRef.current.decodeAudioData(reader.result, buffer => {\n        const noisyBuffer = addGaussianNoise(buffer, 20);\n        const noisyBlob = bufferToBlob(noisyBuffer);\n        const noisyUrl = URL.createObjectURL(noisyBlob);\n        setNoisyAudioURL(noisyUrl);\n\n        const filteredBuffer = applyFIRFilter(noisyBuffer);\n        const filteredBlob = bufferToBlob(filteredBuffer);\n        const filteredUrl = URL.createObjectURL(filteredBlob);\n        setFilteredAudioURL(filteredUrl);\n      });\n    };\n  };\n\n  const addGaussianNoise = (buffer, snr) => {\n    const noisyBuffer = audioContextRef.current.createBuffer(1, buffer.length, buffer.sampleRate);\n    const channelData = buffer.getChannelData(0);\n    const noisyData = noisyBuffer.getChannelData(0);\n    const signalPower = channelData.reduce((sum, val) => sum + val * val, 0) / channelData.length;\n    const noisePower = signalPower / (10 ** (snr / 10));\n    for (let i = 0; i < channelData.length; i++) {\n      noisyData[i] = channelData[i] + (Math.random() - 0.5) * Math.sqrt(noisePower);\n    }\n    return noisyBuffer;\n  };\n\n  const applyFIRFilter = (buffer) => {\n    const filterCoeffs = calculateFIRCoefficients();\n    const input = buffer.getChannelData(0);\n    const output = new Float32Array(input.length);\n    for (let i = 0; i < input.length; i++) {\n      output[i] = 0;\n      for (let j = 0; j < filterCoeffs.length; j++) {\n        if (i - j >= 0) {\n          output[i] += input[i - j] * filterCoeffs[j];\n        }\n      }\n    }\n    const filteredBuffer = audioContextRef.current.createBuffer(1, output.length, buffer.sampleRate);\n    filteredBuffer.copyToChannel(output, 0);\n    return filteredBuffer;\n  };\n\n  const calculateFIRCoefficients = () => {\n    const N = 101; // 滤波器长度\n    const fc1 = 4000 / 16000; // 归一化通带边缘频率\n    const fc2 = 4500 / 16000; // 归一化阻带边缘频率\n    const h = new Float32Array(N);\n    const M = N - 1;\n    for (let n = 0; n < N; n++) {\n      if (n === M / 2) {\n        h[n] = 2 * (fc2 - fc1);\n      } else {\n        h[n] = (Math.sin(2 * Math.PI * fc2 * (n - M / 2)) - Math.sin(2 * Math.PI * fc1 * (n - M / 2))) / (Math.PI * (n - M / 2));\n      }\n      h[n] *= 0.54 - 0.46 * Math.cos(2 * Math.PI * n / M); // 汉宁窗\n    }\n    return h;\n  };\n\n  const bufferToBlob = (buffer) => {\n    const wavBuffer = audioBufferToWav(buffer);\n    return new Blob([new DataView(wavBuffer)], { type: 'audio/wav' });\n  };\n\n  const audioBufferToWav = (buffer) => {\n    const numOfChannels = buffer.numberOfChannels;\n    const length = buffer.length * numOfChannels * 2 + 44;\n    const bufferResult = new ArrayBuffer(length);\n    const view = new DataView(bufferResult);\n    let offset = 0;\n    let pos = 0;\n\n    const writeString = (str) => {\n      for (let i = 0; i < str.length; i++) {\n        view.setUint8(pos + offset, str.charCodeAt(i));\n        offset++;\n      }\n    };\n\n    const write16Bit = (data) => {\n      view.setInt16(pos + offset, data, true);\n      offset += 2;\n    };\n\n    const write32Bit = (data) => {\n      view.setInt32(pos + offset, data, true);\n      offset += 4;\n    };\n\n    writeString('RIFF');\n    write32Bit(length - 8);\n    writeString('WAVE');\n    writeString('fmt ');\n    write32Bit(16);\n    write16Bit(1);\n    write16Bit(numOfChannels);\n    write32Bit(buffer.sampleRate);\n    write32Bit(buffer.sampleRate * numOfChannels * 2);\n    write16Bit(numOfChannels * 2);\n    write16Bit(16);\n    writeString('data');\n    write32Bit(length - pos - 4);\n\n    for (let i = 0; i < buffer.length; i++) {\n      for (let channel = 0; channel < numOfChannels; channel++) {\n        const sample = Math.max(-1, Math.min(1, buffer.getChannelData(channel)[i]));\n        write16Bit(sample < 0 ? sample * 32768 : sample * 32767);\n      }\n    }\n\n    return bufferResult;\n  };\n\n  return (\n    <div>\n      <button onClick={recording ? stopRecording : startRecording}>\n        {recording ? 'Stop Recording' : 'Start Recording'}\n      </button>\n      <input type=\"file\" accept=\"audio/*\" onChange={handleFileUpload} />\n      {audioURL && (\n        <div>\n          <h2>Original Audio</h2>\n          <audio controls src={audioURL}></audio>\n        </div>\n      )}\n      {noisyAudioURL && (\n        <div>\n          <h2>Noisy Audio</h2>\n          <audio controls src={noisyAudioURL}></audio>\n        </div>\n      )}\n      {filteredAudioURL && (\n        <div>\n          <h2>Filtered Audio</h2>\n          <audio controls src={filteredAudioURL}></audio>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AudioProcessor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}