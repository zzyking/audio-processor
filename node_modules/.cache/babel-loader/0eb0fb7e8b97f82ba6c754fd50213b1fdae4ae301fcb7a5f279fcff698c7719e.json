{"ast":null,"code":"var _jsxFileName = \"/Users/king/Documents/GitHub/fir-filter/src/AudioProcessor.js\",\n  _s = $RefreshSig$();\n// src/AudioProcessor.js\nimport React, { useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioProcessor = () => {\n  _s();\n  const [recording, setRecording] = useState(false);\n  const [audioURL, setAudioURL] = useState('');\n  const [filteredAudioURL, setFilteredAudioURL] = useState('');\n  const audioContextRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const startRecording = () => {\n    setRecording(true);\n    audioChunksRef.current = [];\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      mediaRecorderRef.current.ondataavailable = event => {\n        audioChunksRef.current.push(event.data);\n      };\n      mediaRecorderRef.current.onstop = processAudio;\n      mediaRecorderRef.current.start();\n    });\n  };\n  const stopRecording = () => {\n    setRecording(false);\n    mediaRecorderRef.current.stop();\n  };\n  const processAudio = () => {\n    const audioBlob = new Blob(audioChunksRef.current, {\n      type: 'audio/wav'\n    });\n    const audioUrl = URL.createObjectURL(audioBlob);\n    setAudioURL(audioUrl);\n    const reader = new FileReader();\n    reader.readAsArrayBuffer(audioBlob);\n    reader.onloadend = () => {\n      audioContextRef.current.decodeAudioData(reader.result, buffer => {\n        const noisyBuffer = addGaussianNoise(buffer, 20);\n        const filteredBuffer = applyFIRFilter(noisyBuffer);\n        audioContextRef.current.decodeAudioData(filteredBuffer, filteredAudio => {\n          const filteredBlob = new Blob([filteredAudio], {\n            type: 'audio/wav'\n          });\n          const filteredUrl = URL.createObjectURL(filteredBlob);\n          setFilteredAudioURL(filteredUrl);\n        });\n      });\n    };\n  };\n  const addGaussianNoise = (buffer, snr) => {\n    const noisyBuffer = buffer.getChannelData(0).slice();\n    const signalPower = noisyBuffer.reduce((sum, val) => sum + val * val, 0) / noisyBuffer.length;\n    const noisePower = signalPower / 10 ** (snr / 10);\n    const noise = noisyBuffer.map(() => Math.random() * Math.sqrt(noisePower));\n    for (let i = 0; i < noisyBuffer.length; i++) {\n      noisyBuffer[i] += noise[i];\n    }\n    return buffer;\n  };\n  const applyFIRFilter = buffer => {\n    const filterCoeffs = calculateFIRCoefficients();\n    const input = buffer.getChannelData(0);\n    const output = new Float32Array(input.length);\n    for (let i = 0; i < input.length; i++) {\n      output[i] = 0;\n      for (let j = 0; j < filterCoeffs.length; j++) {\n        if (i - j >= 0) {\n          output[i] += input[i - j] * filterCoeffs[j];\n        }\n      }\n    }\n    const filteredBuffer = audioContextRef.current.createBuffer(1, output.length, buffer.sampleRate);\n    filteredBuffer.copyToChannel(output, 0);\n    return filteredBuffer;\n  };\n  const calculateFIRCoefficients = () => {\n    const N = 101; // 滤波器长度\n    const fc1 = 4000 / 16000; // 归一化通带边缘频率\n    const fc2 = 4500 / 16000; // 归一化阻带边缘频率\n    const h = new Float32Array(N);\n    const M = N - 1;\n    for (let n = 0; n < N; n++) {\n      if (n === M / 2) {\n        h[n] = 2 * (fc2 - fc1);\n      } else {\n        h[n] = (Math.sin(2 * Math.PI * fc2 * (n - M / 2)) - Math.sin(2 * Math.PI * fc1 * (n - M / 2))) / (Math.PI * (n - M / 2));\n      }\n      h[n] *= 0.54 - 0.46 * Math.cos(2 * Math.PI * n / M); // Hamming窗\n    }\n    return h;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: recording ? stopRecording : startRecording,\n      children: recording ? 'Stop Recording' : 'Start Recording'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), audioURL && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Original Audio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        src: audioURL\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this), filteredAudioURL && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Filtered Audio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        src: filteredAudioURL\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioProcessor, \"Bm5BlTxXjrRQmH+v5DqXp++LkVY=\");\n_c = AudioProcessor;\nexport default AudioProcessor;\nvar _c;\n$RefreshReg$(_c, \"AudioProcessor\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","AudioProcessor","_s","recording","setRecording","audioURL","setAudioURL","filteredAudioURL","setFilteredAudioURL","audioContextRef","mediaRecorderRef","audioChunksRef","startRecording","current","navigator","mediaDevices","getUserMedia","audio","then","stream","window","AudioContext","webkitAudioContext","MediaRecorder","ondataavailable","event","push","data","onstop","processAudio","start","stopRecording","stop","audioBlob","Blob","type","audioUrl","URL","createObjectURL","reader","FileReader","readAsArrayBuffer","onloadend","decodeAudioData","result","buffer","noisyBuffer","addGaussianNoise","filteredBuffer","applyFIRFilter","filteredAudio","filteredBlob","filteredUrl","snr","getChannelData","slice","signalPower","reduce","sum","val","length","noisePower","noise","map","Math","random","sqrt","i","filterCoeffs","calculateFIRCoefficients","input","output","Float32Array","j","createBuffer","sampleRate","copyToChannel","N","fc1","fc2","h","M","n","sin","PI","cos","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","controls","src","_c","$RefreshReg$"],"sources":["/Users/king/Documents/GitHub/fir-filter/src/AudioProcessor.js"],"sourcesContent":["// src/AudioProcessor.js\nimport React, { useState, useRef } from 'react';\n\nconst AudioProcessor = () => {\n  const [recording, setRecording] = useState(false);\n  const [audioURL, setAudioURL] = useState('');\n  const [filteredAudioURL, setFilteredAudioURL] = useState('');\n  const audioContextRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n\n  const startRecording = () => {\n    setRecording(true);\n    audioChunksRef.current = [];\n    navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      mediaRecorderRef.current.ondataavailable = event => {\n        audioChunksRef.current.push(event.data);\n      };\n      mediaRecorderRef.current.onstop = processAudio;\n      mediaRecorderRef.current.start();\n    });\n  };\n\n  const stopRecording = () => {\n    setRecording(false);\n    mediaRecorderRef.current.stop();\n  };\n\n  const processAudio = () => {\n    const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });\n    const audioUrl = URL.createObjectURL(audioBlob);\n    setAudioURL(audioUrl);\n\n    const reader = new FileReader();\n    reader.readAsArrayBuffer(audioBlob);\n    reader.onloadend = () => {\n      audioContextRef.current.decodeAudioData(reader.result, buffer => {\n        const noisyBuffer = addGaussianNoise(buffer, 20);\n        const filteredBuffer = applyFIRFilter(noisyBuffer);\n\n        audioContextRef.current.decodeAudioData(filteredBuffer, filteredAudio => {\n          const filteredBlob = new Blob([filteredAudio], { type: 'audio/wav' });\n          const filteredUrl = URL.createObjectURL(filteredBlob);\n          setFilteredAudioURL(filteredUrl);\n        });\n      });\n    };\n  };\n\n  const addGaussianNoise = (buffer, snr) => {\n    const noisyBuffer = buffer.getChannelData(0).slice();\n    const signalPower = noisyBuffer.reduce((sum, val) => sum + val * val, 0) / noisyBuffer.length;\n    const noisePower = signalPower / (10 ** (snr / 10));\n    const noise = noisyBuffer.map(() => Math.random() * Math.sqrt(noisePower));\n    for (let i = 0; i < noisyBuffer.length; i++) {\n      noisyBuffer[i] += noise[i];\n    }\n    return buffer;\n  };\n\n  const applyFIRFilter = (buffer) => {\n    const filterCoeffs = calculateFIRCoefficients();\n    const input = buffer.getChannelData(0);\n    const output = new Float32Array(input.length);\n    for (let i = 0; i < input.length; i++) {\n      output[i] = 0;\n      for (let j = 0; j < filterCoeffs.length; j++) {\n        if (i - j >= 0) {\n          output[i] += input[i - j] * filterCoeffs[j];\n        }\n      }\n    }\n    const filteredBuffer = audioContextRef.current.createBuffer(1, output.length, buffer.sampleRate);\n    filteredBuffer.copyToChannel(output, 0);\n    return filteredBuffer;\n  };\n\n  const calculateFIRCoefficients = () => {\n    const N = 101; // 滤波器长度\n    const fc1 = 4000 / 16000; // 归一化通带边缘频率\n    const fc2 = 4500 / 16000; // 归一化阻带边缘频率\n    const h = new Float32Array(N);\n    const M = N - 1;\n    for (let n = 0; n < N; n++) {\n      if (n === M / 2) {\n        h[n] = 2 * (fc2 - fc1);\n      } else {\n        h[n] = (Math.sin(2 * Math.PI * fc2 * (n - M / 2)) - Math.sin(2 * Math.PI * fc1 * (n - M / 2))) / (Math.PI * (n - M / 2));\n      }\n      h[n] *= 0.54 - 0.46 * Math.cos(2 * Math.PI * n / M); // Hamming窗\n    }\n    return h;\n  };\n\n  return (\n    <div>\n      <button onClick={recording ? stopRecording : startRecording}>\n        {recording ? 'Stop Recording' : 'Start Recording'}\n      </button>\n      {audioURL && (\n        <div>\n          <h2>Original Audio</h2>\n          <audio controls src={audioURL}></audio>\n        </div>\n      )}\n      {filteredAudioURL && (\n        <div>\n          <h2>Filtered Audio</h2>\n          <audio controls src={filteredAudioURL}></audio>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AudioProcessor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}